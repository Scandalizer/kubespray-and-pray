---
# Run on K8s master

- hosts: 'kube-master'
  vars:
    heketi_server: 'http://localhost:'
    heketi_github_version: 'v6.0.0'
    heketi_client_version: 'v5.0.1'
    heketi_docker_version: '5'
    # Gluster DockerHub Image
    gluster_version: 'gluster3u13_centos7'
    dir_target: "{{ ansible_env.HOME }}/heketi"
    dir_heketi: "{{ dir_target }}/extras/kubernetes"
    gluster_topo: '~/.kubespray/inventory/topology.json'
    delete_bootstrap_heketi: delete-bootstrap-heketi.sh
    pause_seconds: 30
    heketi_file: heketi-nodeport.yaml
  remote_user: solidfire
  become: true
  run_once: true
  environment:
    PATH: /usr/local/bin:{{ ansible_env.PATH }}

  tasks:

  # Check for existenz of raw storage devices

  - name: Package git
    package:
      name: 'git'

  - name: Clone Heketi repo
    git:
      repo: 'https://github.com/heketi/heketi.git'
      dest: "{{ dir_target }}"
      version: "{{ heketi_github_version }}"
      force: yes

  - name: Modify heketi-bootstrap image value
    lineinfile:
      dest: "{{ ansible_env.HOME }}/heketi/extras/kubernetes/heketi-bootstrap.json"
      state: present
      regexp: '^                "image": "heketi/heketi:dev",'
      line:    "                \"image\": \"heketi/heketi:{{ heketi_docker_version }}\","

  - name: Modify heketi-deployment image value
    lineinfile:
      dest: "{{ ansible_env.HOME }}/heketi/extras/kubernetes/heketi-deployment.json"
      state: present
      regexp: '^                "image": "heketi/heketi:dev",'
      line:    "                \"image\": \"heketi/heketi:{{ heketi_docker_version }}\","

  - name: Modify glusterfs-daemonset image value
    lineinfile:
      dest: "{{ ansible_env.HOME }}/heketi/extras/kubernetes/glusterfs-daemonset.json"
      state: present
      regexp: '^                        "image": "gluster/gluster-centos:latest",'
      line:    "                        \"image\": \"gluster/gluster-centos:{{ gluster_version }}\","

  - name: Get Heketi Client
    get_url:
      url: https://github.com/heketi/heketi/releases/download/{{ heketi_client_version }}/heketi-client-{{ heketi_client_version }}.linux.amd64.tar.gz
      dest: "{{ ansible_env.HOME }}"
      mode: 644

  - name: Extract Heketi Client
    unarchive:
      src: "{{ ansible_env.HOME }}/heketi-client-{{ heketi_client_version }}.linux.amd64.tar.gz"
      dest: "{{ ansible_env.HOME }}"
      creates: "{{ ansible_env.HOME }}/heketi-client"
      remote_src: yes

  - name: Check for GlusterFS DaemonSets
    command: 'kubectl get ds glusterfs --no-headers=1'
    register: check_glusterfs_ds
    ignore_errors: true

  - name: Create K8s Daemonset for GlusterFS
    shell: kubectl create -f "{{ dir_heketi }}/glusterfs-daemonset.json"
    when: check_glusterfs_ds.rc != 0

  - name: Label K8s Nodes
    #shell: kubectl label `kubectl get no -o name | cut -d/ -f2 | perl -pe 's/$/ /'| perl -pe chomp` storagenode=glusterfs
    shell: "kubectl label node {{ item }} storagenode=glusterfs"
    #debug: msg="Host is {{ item }}"
    with_items: "{{ groups['gluster'] }}"
    ignore_errors: true

  - name: Pods wait for
    shell: "kubectl get po -n default | grep glusterfs- |grep Running |wc -l"
    register: glusterfs_daemonset_ready
    retries: 36 
    delay: 5 
    until: glusterfs_daemonset_ready.stdout == "{{ groups['gluster']|length }}"

  #- debug: msg="{{ glusterfs_daemonset_ready.stdout }}"

  - name: Create K8s Service Account
    shell: kubectl create -f "{{ dir_heketi }}/heketi-service-account.json"
    ignore_errors: true

  - name: Create K8s Cluster Role Binding
    shell: kubectl create clusterrolebinding heketi-gluster-admin --clusterrole=edit --serviceaccount=default:heketi-service-account
    ignore_errors: true

  - name: Create K8s Secret
    shell: kubectl create secret generic heketi-config-secret --from-file="{{ dir_heketi }}/heketi.json"
    ignore_errors: true

  - name: Check for Heketi Bootstrap
    shell: kubectl get deployment deploy-heketi --no-headers=1
    register: check_heketi_bootstrap
    ignore_errors: true

  - name: Create Heketi Bootstrap
    shell: kubectl create -f "{{ dir_heketi }}/heketi-bootstrap.json"
    when: check_heketi_bootstrap.rc != 0

  - name: Wait for Heketi Bootstrap
    shell: "kubectl get po | grep '^deploy-heketi-' | grep ' Running '"
    register: wait_for_heketi_bootstrap
    retries: 36 
    delay: 5
    until: wait_for_heketi_bootstrap.rc == 0

  - name: Copy custom topology
    copy:
      src: "{{ gluster_topo }}"
      dest: "{{ dir_heketi }}"
      mode: 0644

  #- name: Get Heketi server ip and port
  #  shell: |
  #    kubectl get svc deploy-heketi --no-headers -o=custom-columns=IP:.spec.clusterIP,PORT:.spec.ports[*].targetPort| perl -pe 's/(\S+)\s+(\S+)/$1:$2/'
  #  register: heketi_ip_port

  - name: Get Heketi server ip
    shell: |
      kubectl get svc deploy-heketi --no-headers -o=custom-columns=IP:.spec.clusterIP,PORT:.spec.ports[*].targetPort| perl -pe 's/(\S+)\s+\S+/$1/'
    register: heketi_ip

  - name: Get Heketi server port
    shell: |
      kubectl get svc deploy-heketi --no-headers -o=custom-columns=IP:.spec.clusterIP,PORT:.spec.ports[*].targetPort| perl -pe 's/\S+\s+(\S+)/$1/'
    register: heketi_port

  - name: Wait for "{{ heketi_ip.stdout }}:{{ heketi_port.stdout }}", don't start checking for 10 seconds
    wait_for:
      host: "{{ heketi_ip.stdout }}"
      port: "{{ heketi_port.stdout }}"
      delay: 10

  - debug: msg="Temporary Deploy Heketi URL http://{{ heketi_ip.stdout }}:{{ heketi_port.stdout }}"

  - name: Load Heketi topology
    #shell: "{{ ansible_env.HOME }}/heketi-client/bin/heketi-cli -s http://{{ heketi_ip.stdout }}:{{ heketi_port.stdout }} topology load --json={{ dir_heketi }}/topology.json"
    command: "{{ ansible_env.HOME }}/heketi-client/bin/heketi-cli -s http://{{ heketi_ip.stdout }}:{{ heketi_port.stdout }} topology load --json=topology.json"
    args:
      chdir: "{{ dir_heketi }}" 
    register: out

  - debug: var=out.stdout_lines

  - debug: msg="{{ ansible_env.HOME }}/heketi-client/bin/heketi-cli -s http://{{ heketi_ip.stdout }}:{{ heketi_port.stdout }} topology info"

  - name: List Heketi topology
    #shell: "{{ ansible_env.HOME }}/heketi-client/bin/heketi-cli -s http://{{ heketi_ip.stdout }}:{{ heketi_port.stdout }} cluster list"
    command: "{{ ansible_env.HOME }}/heketi-client/bin/heketi-cli -s http://{{ heketi_ip.stdout }}:{{ heketi_port.stdout }} topology info"
    register: out

  - debug: var=out.stdout_lines

  - name: Setup Openshift Heketi Storage
    command: "{{ ansible_env.HOME }}/heketi-client/bin/heketi-cli -s http://{{ heketi_ip.stdout }}:{{ heketi_port.stdout }} setup-openshift-heketi-storage"
    args:
      chdir: "{{ dir_heketi }}" 
    register: out
    ignore_errors: true

  - debug: var=out.stdout_lines

  - name: Modify heketi-storage.json
    lineinfile:
      dest: "{{ dir_heketi }}/heketi-storage.json"
      state: present
      regexp: '^                "image": "heketi/heketi:dev",'
      line:    "                \"image\": \"heketi/heketi:{{ heketi_docker_version }}\","
      backup: yes

  - name: Create Heketi storage
    command: "kubectl create -f heketi-storage.json"
    args:
      chdir: "{{ dir_heketi }}" 
    register: out
    ignore_errors: true

  - debug: var=out.stdout_lines

  - name: Pause {{ pause_seconds * 2 }}s for Heketi storage
    pause:
      seconds: "{{ pause_seconds * 2 }}"

  - name: Delete Bootstrap Heketi
    shell: |
      kubectl get all,service,jobs,deployment,secret --selector=deploy-heketi
      echo
      kubectl delete all,service,jobs,deployment,secret --selector=deploy-heketi
      echo
      kubectl get all,service,jobs,deployment,secret --selector=deploy-heketi
    register: out

  - debug: var=out.stdout_lines

  - name: Wait for Heketi Bootstrap Termination
    shell: 'kubectl get all,service,jobs,deployment,secret --no-headers --selector=deploy-heketi 2>/dev/null | wc -l'
    register: wait_for_heketi_bootstrap_termination
    retries: 36 
    delay: 5
    until: wait_for_heketi_bootstrap_termination.stdout == "0"

  - name: Pause {{ pause_seconds }}s for Heketi bootstrap termination
    pause:
      seconds: "{{ pause_seconds }}"

  - name: Create Permanent Heketi
    command: "kubectl create -f heketi-deployment.json"
    args:
      chdir: "{{ dir_heketi }}" 
    register: out

  - debug: var=out.stdout_lines

  - name: Wait for Heketi Permanent
    shell: 'kubectl get svc --no-headers --selector=deploy-heketi 2>/dev/null | wc -l'
    register: wait_for_heketi_permanent
    retries: 36 
    delay: 5
    until: wait_for_heketi_permanent.stdout >= 1

  - name: Pause {{ pause_seconds }}s for Heketi Permanent
    pause:
      seconds: "{{ pause_seconds }}"

  - name: Export Heketi yaml
    shell: kubectl get svc heketi -o yaml > "{{ heketi_file }}"

  - name: Modify Heketi yaml service type
    lineinfile:
      dest: "{{ heketi_file }}"
      regexp: '^  type: '
      line:    '  type: NodePort'

  - name: Change heketi service to NodePort
    command: kubectl apply -f "{{ heketi_file }}" --validate

  - name: Get Heketi port
    shell: kubectl get svc heketi -o yaml | grep '\ nodePort:' | cut -d' ' -f6
    register: heketi_port 

  - name: Show Permanent Heketi
    shell: kubectl get all,service,jobs,deployment,secret --selector=deploy-heketi
    register: out

  - debug: var=out.stdout_lines
