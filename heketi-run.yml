---
# Run on K8s master

- hosts: 'k8s0'
  vars:
    heketi_server: 'http://localhost:'
    heketi_version: 'v6.0.0'
    dir_target: "{{ ansible_env.HOME }}/heketi"
    dir_heketi: "{{ dir_target }}/extras/kubernetes"
    storage_nodes: 'k8s0 k8s1 k8s2 k8s3 k8s4'
    num_nodes: 5
  remote_user: solidfire
  become: true

  tasks:

  # Check for existenz of raw storage devices

  - name: Clone Heketi repo
    git:
      repo: 'https://github.com/heketi/heketi.git'
      dest: "{{ dir_target }}"
      #version: v6.0.0
      version: "{{ heketi_version }}"

  - name: Get and extract Heketi Client
    unarchive:
      src: https://github.com/heketi/heketi/releases/download/{{ heketi_version }}/heketi-client-{{ heketi_version }}.linux.amd64.tar.gz
      dest: "{{ ansible_env.HOME }}"
      remote_src: yes
      creates: "{{ ansible_env.HOME }}/heketi-client"

  - name: Check for GlusterFS DaemonSets
    shell: 'kubectl get ds glusterfs --no-headers=1'
    register: check_glusterfs_ds
    ignore_errors: true

  - name: Create K8s Daemonset for GlusterFS
    shell: kubectl create -f "{{ dir_heketi }}/glusterfs-daemonset.json"
    when: check_glusterfs_ds.rc != 0

  - name: Label K8s Nodes
    #shell: kubectl label `kubectl get no -o name | cut -d/ -f2 | perl -pe 's/$/ /'| perl -pe chomp` storagenode=glusterfs
    shell: "kubectl label node {{ storage_nodes }} storagenode=glusterfs"
    ignore_errors: true

  - name: Pods wait for
    shell: "kubectl get po -n default | grep glusterfs- |grep Running |wc -l"
    register: glusterfs_daemonset_ready
    retries: 12
    delay: 5 
    until: glusterfs_daemonset_ready.stdout == "{{ num_nodes }}"

  #- debug: msg="{{ glusterfs_daemonset_ready.stdout }}"

  - name: Create K8s Service Account
    shell: kubectl create -f "{{ dir_heketi }}/heketi-service-account.json"
    ignore_errors: true

  - name: Create K8s Cluster Role Binding
    shell: kubectl create clusterrolebinding heketi-gluster-admin --clusterrole=edit --serviceaccount=default:heketi-service-account
    ignore_errors: true

  - name: Create K8s Secret
    shell: kubectl create secret generic heketi-config-secret --from-file="{{ dir_heketi }}/heketi.json"
    ignore_errors: true

  - name: Check for Heketi Bootstrap
    shell: kubectl get deployment deploy-heketi --no-headers=1
    register: check_heketi_bootstrap
    ignore_errors: true

  - name: Create Heketi Bootstrap
    shell: kubectl create -f "{{ dir_heketi }}/heketi-bootstrap.json"
    when: check_heketi_bootstrap.rc != 0

  - name: Wait for Heketi Bootstrap
    shell: "kubectl get po | grep '^deploy-heketi-' | grep ' Running '"
    register: wait_for_heketi_bootstrap
    retries: 12
    delay: 5
    until: wait_for_heketi_bootstrap.rc== 0

  - name: Copy custom topology
    copy:
      src: "topology.json"
      dest: "{{ dir_heketi }}"
      mode: 0644

  - name: Get Heketi server ip and port
    shell: |
      kubectl get svc deploy-heketi --no-headers -o=custom-columns=IP:.spec.clusterIP,PORT:.spec.ports[*].targetPort| perl -pe 's/(\S+)\s+(\S+)/$1:$2/'
    register: heketi_ip_port

  - debug: msg="{{ heketi_ip_port.stdout }}"

  - name: Load Heketi topology
    shell: "{{ ansible_env.HOME }}/heketi-client/bin/heketi-cli -s http://{{ heketi_ip_port.stdout }} topology load --json={{ dir_heketi }}/topology.json"

  - name: Setup Openshift Heketi storage
    shell: "{{ ansible_env.HOME }}/heketi-client/bin/heketi-cli -s http://{{ heketi_ip_port.stdout }} setup-openshift-heketi-storage"
    ignore_errors: true

  - name: Create Heketi storage
    shell: kubectl create -f heketi-storage.json
    ignore_errors: true

  - name: Delete Bootstrap Heketi
    shell: kubectl delete all,service,jobs,deployment,secret --selector="deploy-heketi"

  - name: Create Permanent Heketi
    shell: kubectl create -f "{{ dir_heketi }}/heketi-deployment.json"
